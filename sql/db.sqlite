
create table avatar (
	handle text not null primary key,
	fullname text not null
);

create table auth (
	avatar text not null,
	mechanism text not null,
	token text not null
);

CREATE TRIGGER fk_insert_auth_avatar_avatar
        BEFORE INSERT ON auth
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.avatar IS NOT NULL)
                                AND ((SELECT handle FROM avatar WHERE handle = new.avatar) IS NULL)
                        THEN RAISE (ABORT, 'insert on table "auth" violates foreign key constraint "fk_insert_auth_avatar_avatar"')
                END;
        END;
CREATE TRIGGER fk_update1_auth_avatar_avatar
        BEFORE UPDATE ON auth
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.avatar IS NOT NULL)
                                AND ((SELECT handle FROM avatar WHERE handle = new.avatar) IS NULL)
                        THEN RAISE (ABORT, 'update on table "auth" violates foreign key constraint "fk_update1_auth_avatar_avatar"')
                END;
        END;
CREATE TRIGGER fk_update2_auth_avatar_avatar
        AFTER UPDATE ON avatar
        FOR EACH ROW BEGIN
                UPDATE auth SET avatar = new.handle WHERE avatar = OLD.handle;
        END;
CREATE TRIGGER fk_delete_auth_avatar_avatar
        BEFORE DELETE ON avatar
        FOR EACH ROW BEGIN
                DELETE FROM auth WHERE avatar = OLD.handle;
        END;
	
create table follow (
	lhandle text not null,
	rhandle text not null,
	since datetime not null
);

create index since_index on follow(since);
create unique index following on follow(lhandle, rhandle);

CREATE TRIGGER fk_insert_follow_lhandle_avatar
        BEFORE INSERT ON follow
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.lhandle IS NOT NULL)
                                AND ((SELECT handle FROM avatar WHERE handle = new.lhandle) IS NULL)
                        THEN RAISE (ABORT, 'insert on table "follow" violates foreign key constraint "fk_insert_follow_lhandle_avatar"')
                END;
        END;
CREATE TRIGGER fk_update1_follow_lhandle_avatar
        BEFORE UPDATE ON follow
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.lhandle IS NOT NULL)
                                AND ((SELECT handle FROM avatar WHERE handle = new.lhandle) IS NULL)
                        THEN RAISE (ABORT, 'update on table "follow" violates foreign key constraint "fk_update1_follow_lhandle_avatar"')
                END;
        END;
CREATE TRIGGER fk_update2_follow_lhandle_avatar
        AFTER UPDATE ON avatar
        FOR EACH ROW BEGIN
                UPDATE follow SET lhandle = new.handle WHERE lhandle = OLD.handle;
        END;
CREATE TRIGGER fk_delete_follow_lhandle_avatar
        BEFORE DELETE ON avatar
        FOR EACH ROW BEGIN
                DELETE FROM follow WHERE lhandle = OLD.handle;
        END;
	
CREATE TRIGGER fk_insert_follow_rhandle_avatar
        BEFORE INSERT ON follow
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.rhandle IS NOT NULL)
                                AND ((SELECT handle FROM avatar WHERE handle = new.rhandle) IS NULL)
                        THEN RAISE (ABORT, 'insert on table "follow" violates foreign key constraint "fk_insert_follow_rhandle_avatar"')
                END;
        END;
CREATE TRIGGER fk_update1_follow_rhandle_avatar
        BEFORE UPDATE ON follow
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.rhandle IS NOT NULL)
                                AND ((SELECT handle FROM avatar WHERE handle = new.rhandle) IS NULL)
                        THEN RAISE (ABORT, 'update on table "follow" violates foreign key constraint "fk_update1_follow_rhandle_avatar"')
                END;
        END;
CREATE TRIGGER fk_update2_follow_rhandle_avatar
        AFTER UPDATE ON avatar
        FOR EACH ROW BEGIN
                UPDATE follow SET rhandle = new.handle WHERE rhandle = OLD.handle;
        END;
CREATE TRIGGER fk_delete_follow_rhandle_avatar
        BEFORE DELETE ON avatar
        FOR EACH ROW BEGIN
                DELETE FROM follow WHERE rhandle = OLD.handle;
        END;


create table message (
	id integer primary key,
	owner text not null,
	message text not null,
	created datetime not null
);

create index owner_index on message (owner);
create index message_index on message (message);
create index message_create_index on message (created);

CREATE TRIGGER fk_insert_message_avatar
        BEFORE INSERT ON message
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.owner IS NOT NULL)
                                AND ((SELECT handle FROM avatar WHERE handle = new.owner) IS NULL)
                        THEN RAISE (ABORT, 'insert on table "message" violates foreign key constraint "fk_insert_message_avatar"')
                END;
        END;
CREATE TRIGGER fk_update1_message_avatar
        BEFORE UPDATE ON message
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.owner IS NOT NULL)
                                AND ((SELECT handle FROM avatar WHERE handle = new.owner) IS NULL)
                        THEN RAISE (ABORT, 'update on table "message" violates foreign key constraint "fk_update2_message_avatar"')
                END;
        END;
CREATE TRIGGER fk_update2_message_avatar
        AFTER UPDATE ON avatar
        FOR EACH ROW BEGIN
                UPDATE message SET owner = new.handle WHERE owner = OLD.handle;
        END;
CREATE TRIGGER fk_delete_message_avatar
        BEFORE DELETE ON avatar
        FOR EACH ROW BEGIN
                DELETE FROM message WHERE owner = OLD.handle;
        END;

create table attr (
	message integer not null,
	avatar text not null,
	tag text not null
);

create index attr_idx_1 on attr(avatar, message);
create index attr_idx_2 on attr(tag);

CREATE TRIGGER fk_insert_attr_avatar
        BEFORE INSERT ON attr
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.avatar IS NOT NULL)
                                AND ((SELECT handle FROM avatar WHERE handle = new.avatar) IS NULL)
                        THEN RAISE (ABORT, 'insert on table "attr" violates foreign key constraint "fk_insert_attr_avatar"')
                END;
        END;
CREATE TRIGGER fk_update1_attr_avatar
        BEFORE UPDATE ON attr
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.avatar IS NOT NULL)
                                AND ((SELECT handle FROM avatar WHERE handle = new.avatar) IS NULL)
                        THEN RAISE (ABORT, 'update on table "attr" violates foreign key constraint "fk_update1_attr_avatar"')
                END;
        END;
CREATE TRIGGER fk_update2_attr_avatar
        AFTER UPDATE ON avatar
        FOR EACH ROW BEGIN
                UPDATE attr SET avatar = new.handle WHERE avatar = OLD.handle;
        END;
CREATE TRIGGER fk_delete_attr_avatar
        BEFORE DELETE ON avatar
        FOR EACH ROW BEGIN
                DELETE FROM attr WHERE avatar = OLD.handle;
        END;

CREATE TRIGGER fk_insert_attr_message
        BEFORE INSERT ON attr
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.message IS NOT NULL)
                                AND ((SELECT id FROM message WHERE id = new.message) IS NULL)
                        THEN RAISE (ABORT, 'insert on table "attr" violates foreign key constraint "fk_insert_attr_message"')
                END;
        END;
CREATE TRIGGER fk_update1_attr_message
        BEFORE UPDATE ON attr
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.message IS NOT NULL)
                                AND ((SELECT id FROM message WHERE id = new.message) IS NULL)
                        THEN RAISE (ABORT, 'update on table "attr" violates foreign key constraint "fk_update1_attr_message"')
                END;
        END;
CREATE TRIGGER fk_update2_attr_message
        AFTER UPDATE ON message
        FOR EACH ROW BEGIN
                UPDATE attr SET message = new.id WHERE message = OLD.id;
        END;
CREATE TRIGGER fk_delete_attr_message
        BEFORE DELETE ON message
        FOR EACH ROW BEGIN
                DELETE FROM attr WHERE message = OLD.id;
        END;


